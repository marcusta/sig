{"version":3,"sources":["utilities.js","App.js","index.js"],"names":["drawRect","boxes","classes","scores","threshold","imgWidth","imgHeight","ctx","i","length","x","y","width","height","text","color","Math","floor","random","toString","beginPath","strokeStyle","font","fillStyle","fillText","rect","stroke","App","webcamRef","useRef","canvasRef","runCoco","a","console","log","tf","net","setInterval","detect","current","video","readyState","videoWidth","videoHeight","img","fromPixels","resized","resizeBilinear","cast","executeAsync","expandDims","obj","array","dispose","getContext","useEffect","className","ref","muted","style","position","marginLeft","marginRight","left","right","textAlign","zindex","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sZACaA,EAAW,SAACC,EAAOC,EAASC,EAAQC,EAAWC,EAAUC,EAAWC,GAG/E,IAAI,IAAIC,EAAE,EAAGA,GAAKP,EAAMQ,OAAQD,IAE9B,GAAGP,EAAMO,IAAMN,EAAQM,IAAML,EAAOK,GAAGJ,EAAU,mBAGjBH,EAAMO,GAHW,GAGxCE,EAHwC,KAGrCC,EAHqC,KAGlCC,EAHkC,KAG3BC,EAH2B,KAIzCC,EAAOZ,EAAQM,GAGfO,EAAQC,KAAKC,MAAoB,SAAdD,KAAKE,UAAmBC,SAAS,IAC1DZ,EAAIa,YACJb,EAAIc,YAAc,IAAMN,EACxBR,EAAIe,KAAO,aACXf,EAAIgB,UAAY,IAAMR,EAGtBR,EAAIiB,SAASV,EAAMJ,EAAEL,EAAUM,EAAEL,GACjCC,EAAIkB,KAAKf,EAAEL,EAAUM,EAAEL,EAAWM,EAAMP,EAAUQ,EAAOP,GACzDC,EAAImB,WCkFKC,MAlGf,WAEE,IAAMC,EAAYC,iBAAO,MACnBC,EAAYD,iBAAO,MAEnBE,EAAO,uCAAG,4BAAAC,EAAA,6DAEdC,QAAQC,IAAI,iBAFE,SAGIC,IAAkB,iDAHtB,OAGRC,EAHQ,OAIdH,QAAQC,IAAI,0BAEZG,aAAY,WACVC,EAAOF,KACN,KARW,2CAAH,qDAWPE,EAAM,uCAAG,WAAOF,GAAP,iCAAAJ,EAAA,yDAGkB,qBAAtBJ,EAAUW,SACK,OAAtBX,EAAUW,SAC6B,IAAvCX,EAAUW,QAAQC,MAAMC,WALb,wBAQLD,EAAQZ,EAAUW,QAAQC,MAC1BE,EAAad,EAAUW,QAAQC,MAAME,WACrCC,EAAcf,EAAUW,QAAQC,MAAMG,YAG5Cf,EAAUW,QAAQC,MAAM5B,MAAQ8B,EAChCd,EAAUW,QAAQC,MAAM3B,OAAS8B,EAGjCb,EAAUS,QAAQ3B,MAAQ8B,EAC1BZ,EAAUS,QAAQ1B,OAAS8B,EAGrBC,EAAMT,IAAWU,WAAWL,GAC5BM,EAAUX,IAASY,eAAeH,EAAK,CAAC,IAAI,MAAMI,KAAK,SAtBlD,UAyBOZ,EAAIa,aAAaH,EAAQI,WAAW,IAzB3C,eAyBLC,EAzBK,iBA4BSA,EAAI,GAAGC,QA5BhB,eA4BLnD,EA5BK,iBA6BWkD,EAAI,GAAGC,QA7BlB,eA6BLlD,EA7BK,iBA8BUiD,EAAI,GAAGC,QA9BjB,QA8BLjD,EA9BK,OAiCXyC,EAAIS,UACJP,EAAQO,UAGF9C,EAAMuB,EAAUS,QAAQe,WAAW,MACzCtD,EAASC,EAAM,GAAIC,EAAQ,GAAIC,EAAO,GAAI,GAAKuC,EAAYC,EAAapC,GAtC7D,4CAAH,sDA4CZ,OAFAgD,qBAAU,WAAKxB,MAAW,IAGxB,yBAAKyB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,IAAD,CACEC,IAAK7B,EACL8B,OAAO,EACPC,MAAO,CACLC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,EACNC,MAAO,EACPC,UAAW,SACXC,OAAQ,EACRtD,MAAO,IACPC,OAAQ,OAIZ,4BACE4C,IAAK3B,EACL6B,MAAO,CACLC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,EACNC,MAAO,EACPC,UAAW,SACXC,OAAQ,EACRtD,MAAO,IACPC,OAAQ,UC3FpBsD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.9f555a5f.chunk.js","sourcesContent":["// Main drawing function\nexport const drawRect = (boxes, classes, scores, threshold, imgWidth, imgHeight, ctx) =>{\n\n  // Loop through each prediction\n  for(let i=0; i <= boxes.length; i++){\n    // Check if prediction is valid\n    if(boxes[i] && classes[i] && scores[i]>threshold){\n     \n      // Exrtract boxes and classes\n      const [x, y, width, height] = boxes[i]; \n      const text = classes[i];\n      \n      // Setup canvas styles\n      const color = Math.floor(Math.random()*16777215).toString(16);\n      ctx.beginPath();\n      ctx.strokeStyle = '#' + color\n      ctx.font = '18px Arial';\n      ctx.fillStyle = '#' + color\n\n      // Draw text and rectangle \n      ctx.fillText(text, x*imgWidth, y*imgHeight);\n      ctx.rect(x*imgWidth, y*imgHeight, width*imgWidth, height*imgHeight);    \n      ctx.stroke();  \n  }\n  }\n}\n\n","import React, { useRef, useState, useEffect } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\nimport { drawRect } from \"./utilities\";\n\nfunction App() {\n  // Setup webcam refs\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const runCoco = async () => {\n    // Load hosted model\n    console.log('Loading model')\n    const net = await tf.loadGraphModel('http://localhost:4445/custom_model/model.json')\n    console.log(\"Handpose model loaded.\");\n    //  Loop and detect hands\n    setInterval(() => {\n      detect(net);\n    }, 100);\n  };\n\n  const detect = async (net) => {\n    // Check data is available\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      // Set video width\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      // Set canvas height and width\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      // Reshape image data\n      const img = tf.browser.fromPixels(video)\n      const resized = tf.image.resizeBilinear(img, [640,480]).cast('int32')\n      \n      // Execute prediction\n      const obj = await net.executeAsync(resized.expandDims(0))\n      \n      // Extract boxes, classes and scores\n      const boxes = await obj[1].array()  \n      const classes = await obj[2].array()\n      const scores = await obj[4].array()\n      \n      // Cleanup \n      img.dispose()\n      resized.dispose()\n\n      // Draw mesh\n      const ctx = canvasRef.current.getContext(\"2d\");\n      drawRect(boxes[0], classes[0], scores[0], 0.9, videoWidth, videoHeight, ctx); \n    }\n  };\n\n  useEffect(()=>{runCoco()},[]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Webcam\n          ref={webcamRef}\n          muted={true} \n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />\n\n        <canvas\n          ref={canvasRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 8,\n            width: 640,\n            height: 480,\n          }}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}